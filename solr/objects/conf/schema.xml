<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--
 This is the Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default)
 or located where the classloader for the Solr webapp can find it.

 This example schema is the recommended starting point for users.
 It should be kept correct and concise, usable out-of-the-box.

 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml

 PERFORMANCE NOTE: this schema includes many optional features and should not
 be used for benchmarking.  To improve performance one could
  - set stored="false" for all fields possible (esp large fields) when you
    only need to search on the field but don't need to return the original
    value.
  - set indexed="false" if you don't need to search on the field, but only
    return the field as a result of searching on other indexed fields.
  - remove all unneeded copyField statements
  - for best index size and searching performance, set "index" to false
    for all general text fields, use copyField to copy them to the
    catchall "text" field, and use that for searching.
  - For maximum indexing performance, use the StreamingUpdateSolrServer
    java client.
  - Remember to run the JVM in server mode, and use a higher logging level
    that avoids logging every request
-->

<schema name="artefacts" version="1.5">
    <!-- attribute "name" is the name of this schema and is only used for display purposes.
         Applications should change this to reflect the nature of the search collection.
         version="1.2" is Solr's version number for the schema syntax and semantics.  It should
         not normally be changed by applications.
         1.0: multiValued attribute did not exist, all fields are multiValued by nature
         1.1: multiValued attribute introduced, false by default
         1.2: omitTermFreqAndPositions attribute introduced, true by default except for text fields.
         1.3: removed optional field compress feature
       -->

    <types>
        <!-- field type definitions. The "name" attribute is
           just a label to be used by field definitions.  The "class"
           attribute and any other attributes determine the real
           behavior of the fieldType.
             Class names starting with "solr" refer to java classes in the
           org.apache.solr.analysis package.
        -->

        <!-- The StrField type is not analyzed, but indexed/stored verbatim. -->
        <fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>

        <!-- boolean type: "true" or "false" -->
        <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true"/>
        <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
        <fieldtype name="binary" class="solr.BinaryField"/>

        <!-- The optional sortMissingLast and sortMissingFirst attributes are
             currently supported on types that are sorted internally as strings.
               This includes "string","boolean","sint","slong","sfloat","sdouble","pdate"
           - If sortMissingLast="true", then a sort on this field will cause documents
             without the field to come after documents with the field,
             regardless of the requested sort order (asc or desc).
           - If sortMissingFirst="true", then a sort on this field will cause documents
             without the field to come before documents with the field,
             regardless of the requested sort order.
           - If sortMissingLast="false" and sortMissingFirst="false" (the default),
             then default lucene sorting will be used which places docs without the
             field first in an ascending sort and last in a descending sort.
        -->

        <!--
          Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.
        -->
        <fieldType name="int" class="solr.TrieIntField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
        <fieldType name="float" class="solr.TrieFloatField" precisionStep="0" omitNorms="true"
                   positionIncrementGap="0"/>
        <fieldType name="long" class="solr.TrieLongField" precisionStep="0" omitNorms="true" positionIncrementGap="0"/>
        <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" omitNorms="true"
                   positionIncrementGap="0"/>

        <!--
         Numeric field types that index each value at various levels of precision
         to accelerate range queries when the number of values between the range
         endpoints is large. See the javadoc for NumericRangeQuery for internal
         implementation details.

         Smaller precisionStep values (specified in bits) will lead to more tokens
         indexed per value, slightly larger index size, and faster range queries.
         A precisionStep of 0 disables indexing at different precision levels.
        -->
        <fieldType name="tint" class="solr.TrieIntField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
        <fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" omitNorms="true"
                   positionIncrementGap="0"/>
        <fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" omitNorms="true" positionIncrementGap="0"/>
        <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" omitNorms="true"
                   positionIncrementGap="0"/>

        <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
             is a more restricted form of the canonical representation of dateTime
             http://www.w3.org/TR/xmlschema-2/#dateTime
             The trailing "Z" designates UTC time and is mandatory.
             Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
             All other components are mandatory.

             Expressions can also be used to denote calculations that should be
             performed relative to "NOW" to determine the value, ie...

                   NOW/HOUR
                      ... Round to the start of the current hour
                   NOW-1DAY
                      ... Exactly 1 day prior to now
                   NOW/DAY+6MONTHS+3DAYS
                      ... 6 months and 3 days in the future from the start of
                          the current day

             Consult the DateField javadocs for more information.

             Note: For faster range queries, consider the tdate type
          -->
        <fieldType name="date" class="solr.TrieDateField" omitNorms="true" precisionStep="0" positionIncrementGap="0"/>

        <!-- A Trie based date field for faster date range queries and date faceting. -->
        <fieldType name="tdate" class="solr.TrieDateField" omitNorms="true" precisionStep="6" positionIncrementGap="0"/>


        <!--
          Note:
          These should only be used for compatibility with existing indexes (created with older Solr versions)
          or if "sortMissingFirst" or "sortMissingLast" functionality is needed. Use Trie based fields instead.

          Plain numeric field types that store and index the text
          value verbatim (and hence don't support range queries, since the
          lexicographic ordering isn't equal to the numeric ordering)
        -->
        <fieldType name="pint" class="solr.IntField" omitNorms="true"/>
        <fieldType name="plong" class="solr.LongField" omitNorms="true"/>
        <fieldType name="pfloat" class="solr.FloatField" omitNorms="true"/>
        <fieldType name="pdouble" class="solr.DoubleField" omitNorms="true"/>
        <fieldType name="pdate" class="solr.DateField" sortMissingLast="true" omitNorms="true"/>


        <!--
          Note:
          These should only be used for compatibility with existing indexes (created with older Solr versions)
          or if "sortMissingFirst" or "sortMissingLast" functionality is needed. Use Trie based fields instead.

          Numeric field types that manipulate the value into
          a string value that isn't human-readable in its internal form,
          but with a lexicographic ordering the same as the numeric ordering,
          so that range queries work correctly.
        -->
        <fieldType name="sint" class="solr.SortableIntField" sortMissingLast="true" omitNorms="true"/>
        <fieldType name="slong" class="solr.SortableLongField" sortMissingLast="true" omitNorms="true"/>
        <fieldType name="sfloat" class="solr.SortableFloatField" sortMissingLast="true" omitNorms="true"/>
        <fieldType name="sdouble" class="solr.SortableDoubleField" sortMissingLast="true" omitNorms="true"/>


        <!-- The "RandomSortField" is not used to store or search any
             data.  You can declare fields of this type it in your schema
             to generate pseudo-random orderings of your docs for sorting
             purposes.  The ordering is generated based on the field name
             and the version of the index, As long as the index version
             remains unchanged, and the same field name is reused,
             the ordering of the docs will be consistent.
             If you want different psuedo-random orderings of documents,
             for the same version of the index, use a dynamicField and
             change the name
         -->
        <fieldType name="random" class="solr.RandomSortField" indexed="true"/>

        <!-- solr.TextField allows the specification of custom text analyzers
             specified as a tokenizer and a list of token filters. Different
             analyzers may be specified for indexing and querying.

             The optional positionIncrementGap puts space between multiple fields of
             this type on the same document, with the purpose of preventing false phrase
             matching across fields.

             For more info on customizing your analyzer chain, please see
             http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
         -->

        <!-- One can also specify an existing Analyzer class that has a
             default constructor via the class attribute on the analyzer element
        <fieldType name="text_greek" class="solr.TextField">
          <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
        </fieldType>
        -->

        <!-- A text field that only splits on whitespace for exact matching of words -->
        <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            </analyzer>
        </fieldType>

        <!-- A text field that uses WordDelimiterFilter to enable splitting and matching of
            words on case-change, alpha numeric boundaries, and non-alphanumeric chars,
            so that a query of "wifi" or "wi fi" could match a document containing "Wi-Fi".
            Synonyms and stopwords are customized by external files, and stemming is enabled.
            The attribute autoGeneratePhraseQueries="true" (the default) causes words that get split to
            form phrase queries. For example, WordDelimiterFilter splitting text:pdp-11 will cause the parser
            to generate text:"pdp 11" rather than (text:PDP OR text:11).
            NOTE: autoGeneratePhraseQueries="true" tends to not work well for non whitespace delimited languages.
            -->
        <fieldType name="text" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
            <analyzer type="index">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <!-- in this example, we will only use synonyms at query time
                <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
                -->
                <!-- Case insensitive stop word removal.
                  add enablePositionIncrements=true in both the index and query
                  analyzers to leave a 'gap' for more accurate phrase queries.
                -->
                <filter class="solr.StopFilterFactory"
                        ignoreCase="true"
                        words="stopwords.txt"
                        enablePositionIncrements="true"
                        />
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1"
                        catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
                <filter class="solr.PorterStemFilterFactory"/>
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
                <filter class="solr.StopFilterFactory"
                        ignoreCase="true"
                        words="stopwords.txt"
                        enablePositionIncrements="true"
                        />
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1"
                        catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
                <filter class="solr.PorterStemFilterFactory"/>
            </analyzer>
        </fieldType>


        <!-- Less flexible matching, but less false matches.  Probably not ideal for product names,
             but may be good for SKUs.  Can insert dashes in the wrong place and still match. -->
        <fieldType name="textTight" class="solr.TextField" positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0"
                        catenateWords="1" catenateNumbers="1" catenateAll="0"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
                <filter class="solr.EnglishMinimalStemFilterFactory"/>
                <!-- this filter can remove any duplicate tokens that appear at the same position - sometimes
                     possible with WordDelimiterFilter in conjuncton with stemming. -->
                <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
            </analyzer>
        </fieldType>


        <!-- A general unstemmed text field - good if one does not know the language of the field -->
        <fieldType name="textgen" class="solr.TextField" positionIncrementGap="100">
            <analyzer type="index">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"
                        enablePositionIncrements="true"/>
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1"
                        catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="0"/>
                <filter class="solr.LowerCaseFilterFactory"/>
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
                <filter class="solr.StopFilterFactory"
                        ignoreCase="true"
                        words="stopwords.txt"
                        enablePositionIncrements="true"
                        />
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1"
                        catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="0"/>
                <filter class="solr.LowerCaseFilterFactory"/>
            </analyzer>
        </fieldType>


        <!-- A general unstemmed text field that indexes tokens normally and also
             reversed (via ReversedWildcardFilterFactory), to enable more efficient
         leading wildcard queries. -->
        <fieldType name="text_rev" class="solr.TextField" positionIncrementGap="100">
            <analyzer type="index">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"
                        enablePositionIncrements="true"/>
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1"
                        catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="0"/>
                <filter class="solr.LowerCaseFilterFactory"/>
                <filter class="solr.ReversedWildcardFilterFactory" withOriginal="true"
                        maxPosAsterisk="3" maxPosQuestion="2" maxFractionAsterisk="0.33"/>
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
                <filter class="solr.StopFilterFactory"
                        ignoreCase="true"
                        words="stopwords.txt"
                        enablePositionIncrements="true"
                        />
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1"
                        catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="0"/>
                <filter class="solr.LowerCaseFilterFactory"/>
            </analyzer>
        </fieldType>

        <!-- charFilter + WhitespaceTokenizer  -->
        <!--
        <fieldType name="textCharNorm" class="solr.TextField" positionIncrementGap="100" >
          <analyzer>
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
          </analyzer>
        </fieldType>
        -->

        <!-- This is an example of using the KeywordTokenizer along
             With various TokenFilterFactories to produce a sortable field
             that does not include some properties of the source text
          -->
        <fieldType name="alphaOnlySort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
            <analyzer>
                <!-- KeywordTokenizer does no actual tokenizing, so the entire
                     input string is preserved as a single token
                  -->
                <tokenizer class="solr.KeywordTokenizerFactory"/>
                <!-- The LowerCase TokenFilter does what you expect, which can be
                     when you want your sorting to be case insensitive
                  -->
                <filter class="solr.LowerCaseFilterFactory"/>
                <!-- The TrimFilter removes any leading or trailing whitespace -->
                <filter class="solr.TrimFilterFactory"/>
                <!-- The PatternReplaceFilter gives you the flexibility to use
                     Java Regular expression to replace any sequence of characters
                     matching a pattern with an arbitrary replacement string,
                     which may include back references to portions of the original
                     string matched by the pattern.

                     See the Java Regular Expression documentation for more
                     information on pattern and replacement string syntax.

                     http://java.sun.com/j2se/1.5.0/docs/api/java/util/regex/package-summary.html
                  -->
                <filter class="solr.PatternReplaceFilterFactory"
                        pattern="([^a-z])" replacement="" replace="all"
                        />
            </analyzer>
        </fieldType>

        <fieldtype name="phonetic" stored="false" indexed="true" class="solr.TextField">
            <analyzer>
                <tokenizer class="solr.StandardTokenizerFactory"/>
                <filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
            </analyzer>
        </fieldtype>

        <fieldtype name="payloads" stored="false" indexed="true" class="solr.TextField">
            <analyzer>
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <!--
                The DelimitedPayloadTokenFilter can put payloads on tokens... for example,
                a token of "foo|1.4"  would be indexed as "foo" with a payload of 1.4f
                Attributes of the DelimitedPayloadTokenFilterFactory :
                 "delimiter" - a one character delimiter. Default is | (pipe)
             "encoder" - how to encode the following value into a playload
                float -> org.apache.lucene.analysis.payloads.FloatEncoder,
                integer -> o.a.l.a.p.IntegerEncoder
                identity -> o.a.l.a.p.IdentityEncoder
                    Fully Qualified class name implementing PayloadEncoder, Encoder must have a no arg constructor.
                 -->
                <filter class="solr.DelimitedPayloadTokenFilterFactory" encoder="float"/>
            </analyzer>
        </fieldtype>

        <!-- lowercases the entire field value, keeping it as a single token.  -->
        <fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.KeywordTokenizerFactory"/>
                <filter class="solr.LowerCaseFilterFactory"/>
            </analyzer>
        </fieldType>

        <fieldType name="text_path" class="solr.TextField" positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.PathHierarchyTokenizerFactory"/>
            </analyzer>
        </fieldType>

        <!-- since fields of this type are by default not stored or indexed,
             any data added to them will be ignored outright.  -->
        <fieldtype name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField"/>

        <!-- This point type indexes the coordinates as separate fields (subFields)
          If subFieldType is defined, it references a type, and a dynamic field
          definition is created matching *___<typename>.  Alternately, if
          subFieldSuffix is defined, that is used to create the subFields.
          Example: if subFieldType="double", then the coordinates would be
            indexed in fields myloc_0___double,myloc_1___double.
          Example: if subFieldSuffix="_d" then the coordinates would be indexed
            in fields myloc_0_d,myloc_1_d
          The subFields are an implementation detail of the fieldType, and end
          users normally should not need to know about them.
         -->
        <fieldType name="point" class="solr.PointType" dimension="2" subFieldSuffix="_d"/>

        <!-- A specialized field for geospatial search. If indexed, this fieldType must not be multivalued. -->
        <fieldType name="location" class="solr.LatLonType" subFieldSuffix="_coordinate"/>

        <!--
         A Geohash is a compact representation of a latitude longitude pair in a single field.
         See http://wiki.apache.org/solr/SpatialSearch
        -->
        <fieldtype name="geohash" class="solr.GeoHashField"/>
    </types>


    <fields>
        <!-- Valid attributes for fields:
          name: mandatory - the name for the field
          type: mandatory - the name of a previously defined type from the
            <types> section
          indexed: true if this field should be indexed (searchable or sortable)
          stored: true if this field should be retrievable
          multiValued: true if this field may contain multiple values per document
          omitNorms: (expert) set to true to omit the norms associated with
            this field (this disables length normalization and index-time
            boosting for the field, and saves some memory).  Only full-text
            fields or fields that need an index-time boost need norms.
          termVectors: [false] set to true to store the term vector for a
            given field.
            When using MoreLikeThis, fields used for similarity should be
            stored for best performance.
          termPositions: Store position information with the term vector.
            This will increase storage costs.
          termOffsets: Store offset information with the term vector. This
            will increase storage costs.
          default: a value that should be used if no value is specified
            when adding a document.
        -->
        <field name="_version_" type="long" indexed="true" stored="true" multiValued="false"/>

        <!--  identifiers -->
        <field name="findIdentifier" type="string" indexed="true" stored="true" required="true"/>
        <field name="id" type="int" indexed="true" stored="true" required="true"/>
        <field name="old_findID" type="string" indexed="true" stored="true"/>
        <field name="hoardID" type="string" indexed="true" stored="true"/>
        <field name="secuid" type="string" indexed="true" stored="true"/>

        <!--  Spatial metadata -->
        <field name="regionName" type="string" indexed="true" stored="true"/>
        <field name="county" type="string" indexed="true" stored="true"/>
        <field name="district" type="string" indexed="true" stored="true"/>
        <field name="parish" type="string" indexed="true" stored="true"/>
        <field name="knownas" type="string" indexed="true" stored="true"/>
        <field name="findspotcode" type="string" indexed="true" stored="true"/>

        <!--  Spatial coordinates -->
        <field name="fourFigure" type="string" indexed="true" stored="true"/>
        <field name="gridref" type="string" indexed="true" stored="true"/>
        <field name="easting" type="string" indexed="true" stored="true"/>
        <field name="northing" type="string" indexed="true" stored="true"/>
        <field name="latitude" type="double" indexed="true" stored="true"/>
        <field name="longitude" type="double" indexed="true" stored="true"/>
        <field name="elevation" type="float" indexed="true" stored="true"/>
        <field name="coordinates" type="location" indexed="true" stored="true"/>
        <field name="geohash" type="string" indexed="true" stored="true"/>
        <field name="fourFigureLat" type="double" indexed="true" stored="true"/>
        <field name="fourFigureLon" type="double" indexed="true" stored="true"/>
        <field name="precision" type="int" indexed="true" stored="true"/>
        <field name="accuracy" type="int" indexed="true" stored="true"/>
        <field name="gridSource" type="string" indexed="true" stored="true"/>

        <!-- Object metadata -->
        <field name="institution" type="string" indexed="true" stored="true"/>
        <field name="description" type="text" indexed="true" stored="true"/>
        <field name="notes" type="text" indexed="true" stored="true"/>
        <field name="objecttype" type="text" indexed="true" stored="true"/>
        <field name="smrRef" type="string" indexed="true" stored="true"/>
        <field name="otherRef" type="string" indexed="true" stored="true"/>
        <field name="culture" type="string" indexed="true" stored="true"/>
        <field name="cultureName" type="string" indexed="true" stored="true"/>
        <field name="inscription" type="string" indexed="true" stored="true"/>
        <field name="classification" type="string" indexed="true" stored="true"/>
        <field name="subClassification" type="string" indexed="true" stored="true"/>
        <field name="TID" type="string" indexed="true" stored="true"/>
        <field name="treasure" type="int" indexed="true" stored="true"/>
        <field name="workflow" type="int" indexed="true" stored="true"/>
        <field name="material" type="int" indexed="true" stored="true"/>
        <field name="materialTerm" type="string" indexed="true" stored="true"/>
        <field name="primaryMaterialBM" type="int" indexed="true" stored="true"/>
        <field name="secondaryMaterial" type="int" indexed="true" stored="true"/>
        <field name="secondaryMaterialTerm" type="string" indexed="true" stored="true"/>
        <field name="secondaryMaterialBM" type="int" indexed="true" stored="true"/>
        <field name="currentLocation" type="text" indexed="true" stored="true"/>
        <field name="musaccno" type="string" indexed="true" stored="true"/>
        <field name="rally" type="int" indexed="true" stored="true"/>
        <field name="rallyID" type="int" indexed="true" stored="true"/>
        <field name="rallyName" type="string" indexed="true" stored="true"/>
        <field name="decstyle" type="int" indexed="true" stored="true"/>
        <field name="decstyleTerm" type="string" indexed="true" stored="true"/>
        <field name="manufacture" type="int" indexed="true" stored="true"/>
        <field name="manufactureTerm" type="string" indexed="true" stored="true"/>
        <field name="bmManufacture" type="int" indexed="true" stored="true"/>
        <field name="surface" type="int" indexed="true" stored="true"/>
        <field name="treatment" type="string" indexed="true" stored="true"/>
        <field name="treatmentTerm" type="string" indexed="true" stored="true"/>
        <field name="bmTreatment" type="int" indexed="true" stored="true"/>
        <field name="preservation" type="int" indexed="true" stored="true"/>
        <field name="preservationTerm" type="string" indexed="true" stored="true"/>
        <field name="bmPreservation" type="int" indexed="true" stored="true"/>
        <field name="discovery" type="int" indexed="true" stored="true"/>
        <field name="discoveryMethod" type="string" indexed="true" stored="true"/>
        <field name="discovered" type="int" indexed="true" stored="true"/>
        <field name="subsequentAction" type="string" indexed="true" stored="true"/>
        <field name="subsequentActionTerm" type="string" indexed="true" stored="true"/>
        <field name="completeness" type="int" indexed="true" stored="true"/>
        <field name="completenessTerm" type="string" indexed="true" stored="true"/>
        <field name="note" type="int" indexed="true" stored="true"/>
        <field name="reason" type="int" indexed="true" stored="true"/>
        <field name="reasonTerm" type="string" indexed="true" stored="true"/>
        <field name="weight" type="double" indexed="true" stored="true"/>
        <field name="width" type="double" indexed="true" stored="true"/>
        <field name="diameter" type="double" indexed="true" stored="true"/>
        <field name="height" type="double" indexed="true" stored="true"/>
        <field name="thickness" type="double" indexed="true" stored="true"/>
        <field name="length" type="double" indexed="true" stored="true"/>
        <field name="quantity" type="int" indexed="true" stored="true"/>

        <!--Certainties -->
        <field name="objectCertainty" type="string" indexed="true" stored="true" />
        <field name="objectCertaintyID" type="int" indexed="true" stored="true" />
        <field name="rulerQualifier" type="string" indexed="true" stored="true"/>
        <field name="rulerQualifierID" type="int" indexed="true" stored="true"/>
        <field name="mintQualifier" type="string" indexed="true" stored="true"/>
        <field name="mintQualifierID" type="int" indexed="true" stored="true"/>
        <field name="denominationQualifier" type="string" indexed="true" stored="true"/>
        <field name="denominationQualifierID" type="int" indexed="true" stored="true"/>
        <field name="periodFromCertaintyID" type="int" indexed="true" stored="true"/>
        <field name="periodFromCertainty" type="string" indexed="true" stored="true"/>
        <field name="periodToCertaintyID" type="int" indexed="true" stored="true"/>
        <field name="periodToCertainty" type="string" indexed="true" stored="true"/>
        <field name="dateFromQualifierID" type="int" indexed="true" stored="true"/>
        <field name="dateFromQualifier" type="string" indexed="true" stored="true"/>
        <field name="dateToQualifierID" type="int" indexed="true" stored="true"/>
        <field name="dateToQualifier" type="string" indexed="true" stored="true"/>

        <!-- Chronology metadata -->
        <field name="broadperiod" type="string" indexed="true" stored="true"/>
        <field name="periodFrom" type="int" indexed="true" stored="true"/>
        <field name="periodFromName" type="string" indexed="true" stored="true"/>
        <field name="periodTo" type="int" indexed="true" stored="true"/>
        <field name="periodToName" type="string" indexed="true" stored="true"/>

        <!--   Linked data period identifiers -->

        <field name="fromdate" type="int" indexed="true" stored="true"/>
        <field name="todate" type="int" indexed="true" stored="true"/>
        <field name="fromsubperiod" type="int" indexed="true" stored="true"/>
        <field name="tosubperiod" type="int" indexed="true" stored="true"/>
        <field name="subperiodFrom" type="string" indexed="true" stored="true"/>
        <field name="subperiodTo" type="string" indexed="true" stored="true"/>
        <field name="datefound1" type="date" indexed="true" stored="true"/>
        <field name="datefound2" type="date" indexed="true" stored="true"/>
        <field name="fromDateQualifier" type="string" indexed="true" stored="true"/>
        <field name="toDateQualifier" type="string" indexed="true" stored="true"/>

        <!--  Admin metadata -->
        <field name="updatedBy" type="string" indexed="true" stored="true"/>
        <field name="createdBy" type="int" indexed="true" stored="true"/>
        <field name="creator" type="string" indexed="true" stored="true"/>
        <field name="created" type="date" indexed="true" stored="true"/>
        <field name="updated" type="date" indexed="true" stored="true"/>
        <field name="updater" type="string" indexed="true" stored="true"/>
        <field name="dbpediaSlug" type="string" indexed="true" stored="true"/>

        <!--  Numismatica -->
        <field name="ruler" type="int" indexed="true" stored="true"/>
        <field name="rulerName" type="string" indexed="true" stored="true"/>
        <field name="ruler2" type="int" indexed="true" stored="true"/>
        <field name="secondaryRulerName" type="string" indexed="true" stored="true"/>
        <field name="denomination" type="int" indexed="true" stored="true"/>
        <field name="denominationName" type="string" indexed="true" stored="true"/>
        <field name="mint" type="int" indexed="true" stored="true"/>
        <field name="mintName" type="string" indexed="true" stored="true"/>
        <field name="obverseDescription" type="text" indexed="true" stored="true"/>
        <field name="reverseDescription" type="text" indexed="true" stored="true"/>
        <field name="obverseLegend" type="text" indexed="true" stored="true"/>
        <field name="reverseLegend" type="text" indexed="true" stored="true"/>
        <field name="mintmark" type="string" indexed="true" stored="true"/>
        <field name="reeceID" type="int" indexed="true" stored="true"/>
        <field name="cciNumber" type="string" indexed="true" stored="true"/>
        <field name="allenType" type="string" indexed="true" stored="true"/>
        <field name="mackType" type="string" indexed="true" stored="true"/>
        <field name="abcType" type="string" indexed="true" stored="true"/>
        <field name="vaType" type="string" indexed="true" stored="true"/>
        <field name="bmcType" type="string" indexed="true" stored="true"/>
        <field name="geographyID" type="int" indexed="true" stored="true"/>
        <field name="geography" type="string" indexed="true" stored="true"/>
        <field name="moneyer" type="string" indexed="true" stored="true"/>
        <field name="moneyerName" type="string" indexed="true" stored="true"/>
        <field name="tribe" type="int" indexed="true" stored="true"/>
        <field name="tribeName" type="string" indexed="true" stored="true"/>
        <field name="category" type="int" indexed="true" stored="true"/>
        <field name="categoryTerm" type="string" indexed="true" stored="true"/>
        <field name="type" type="int" indexed="true" stored="true"/>
        <field name="typeTerm" type="string" indexed="true" stored="true"/>
        <field name="axis" type="int" indexed="true" stored="true"/>
        <field name="reverse" type="int" indexed="true" stored="true"/>
        <field name="reverseType" type="text" indexed="true" stored="true"/>
        <field name="status" type="int" indexed="true" stored="true"/>
        <field name="statusTerm" type="string" indexed="true" stored="true"/>
        <field name="jettonClass" type="string" indexed="true" stored="true" />
        <field name="jettonType" type="string" stored="true" indexed="true" />
        <field name="jettonGroup" type="string" stored="true" indexed="true" />
        <field name="jettonClassID" type="int" stored="true" indexed="true" />
        <field name="jettonGroupID" type="int" stored="true" indexed="true" />
        <field name="jettonTypeID" type="int" stored="true" indexed="true" />

        <!--
        Image specific fields
        This just pulls a single image from the record
        -->
        <field name="filename" type="string" indexed="true" stored="true"/>
        <field name="thumbnail" type="int" indexed="true" stored="true"/>
        <field name="imagedir" type="string" indexed="true" stored="true"/>
        <field name="imageCopyright" type="string" indexed="true" stored="true"/>
        <field name="3D" type="string" indexed="true" stored="true" />

        <!--  Linked data identifiers -->
        <field name="bmCultureID" type="string" indexed="true" stored="true"/>

        <!--  Person specific details -->
        <field name="finder" type="string" indexed="true" stored="true"/>
        <field name="finderID" type="string" indexed="true" stored="true"/>
        <field name="identifier" type="string" indexed="true" stored="true"/>
        <field name="identifierID" type="string" indexed="true" stored="true"/>
        <field name="secondaryIdentifier" type="string" indexed="true" stored="true"/>
        <field name="identifier2ID" type="string" indexed="true" stored="true"/>
        <field name="recorder" type="string" indexed="true" stored="true"/>
        <field name="recorderID" type="string" indexed="true" stored="true"/>

        <!-- Numismatic linked data -->
        <field name="rulerNomisma" type="string" indexed="true" stored="true"/>
        <field name="rulerDbpedia" type="string" indexed="true" stored="true"/>
        <field name="rulerViaf" type="int" indexed="true" stored="true"/>
        <field name="rulerBM" type="int" indexed="true" stored="true"/>
        <field name="dbpediaDenomination" type="string" indexed="true" stored="true"/>
        <field name="denominationNomisma" type="string" indexed="true" stored="true"/>
        <field name="moneyerDbpedia" type="string" indexed="true" stored="true"/>
        <field name="moneyerViaf" type="int" indexed="true" stored="true"/>
        <field name="moneyerBM" type="int" indexed="true" stored="true"/>
        <field name="bmTribeID" type="int" indexed="true" stored="true"/>
        <field name="nomismaMintID" type="string" indexed="true" stored="true"/>
        <field name="mintWoeid" type="int" indexed="true" stored="true"/>
        <field name="mintGeonamesID" type="int" indexed="true" stored="true"/>
        <field name="mintBM" type="string" indexed="true" stored="true"/>
        <field name="pleiadesID" type="int" indexed="true" stored="true"/>
        <field name="nomismaDenominationID" type="string" indexed="true" stored="true"/>
        <field name="denominationBM" type="int" indexed="true" stored="true"/>
        <field name="denominationDbpedia" type="string" indexed="true" stored="true"/>
        <field name="rrcID" type="string" indexed="true" stored="true" />
        <field name="ricID" type="string" indexed="true" stored="true" />

        <!--  Findspot linked data  -->
        <field name="districtID" type="int" indexed="true" stored="true"/>
        <field name="districtType" type="string" indexed="true" stored="true"/>
        <field name="parishID" type="int" indexed="true" stored="true"/>
        <field name="parishType" type="string" indexed="true" stored="true"/>
        <field name="countyID" type="int" indexed="true" stored="true"/>
        <field name="countyType" type="string" indexed="true" stored="true"/>
        <field name="regionID" type="int" indexed="true" stored="true"/>
        <field name="woeid" type="int" indexed="true" stored="true"/>
        <field name="geonamesID" type="int" indexed="true" stored="true"/>
        <field name="what3words" type="string" indexed="true" stored="true" />

        <!-- Hoard specific fields -->
        <field name="lastRulerID" type="int" indexed="true" stored="true" />
        <field name="lastRuler" type="string" indexed="true" stored="true" />
        <field name="quantityCoins" type="int" indexed="true" stored="true" />
        <field name="quantityArtefacts" type="int" indexed="true" stored="true" />
        <field name="quantityContainers" type="int" indexed="true" stored="true" />
        <field name="fromTerminalYear" type="int" indexed="true" stored="true" />
        <field name="toTerminalYear" type="int" indexed="true" stored="true" />
        <field name="qualityRatingNumismatic" type="int" indexed="true" stored="true" />
        <field name="qualityRatingArchaeological" type="int" indexed="true" stored="true" />
        <field name="qualityRatingFindspot" type="int" indexed="true" stored="true" />
        <field name="terminalReasonID" type="int" indexed="true" stored="true" />
        <field name="terminalReason" type="string" indexed="true" stored="true" />
        <field name="legacyID" type="int" indexed="true" stored="true" />
        <field name="archaeologyPeriodFrom" type="int" indexed="true" stored="true" />
        <field name="archaeologyPeriodTo" type="int" indexed="true" stored="true" />
        <field name="siteDateYear1" type="int" indexed="true" stored="true" />
        <field name="siteDateYear2" type="int" indexed="true" stored="true" />
        <field name="featureDateYear1" type="int" indexed="true" stored="true" />
        <field name="featureDateYear2" type="int" indexed="true" stored="true" />
        <field name="excavatedYear1" type="int" indexed="true" stored="true" />
        <field name="excavatedYear2" type="int" indexed="true" stored="true" />
        <field name="archaeologyDescription" type="text" indexed="true" stored="true" />
        <field name="knownSite" type="int" indexed="true" stored="true" />
        <field name="excavated" type="int" indexed="true" stored="true" />
        <field name="siteClassID" type="int" indexed="true" stored="true" />
        <field name="siteClass" type="string" indexed="true" stored="true" />
        <field name="siteContextID" type="int" indexed="true" stored="true" />
        <field name="siteContext" type="string" indexed="true" stored="true" />
        <field name="featureID" type="int" indexed="true" stored="true" />
        <field name="feature" type="string" indexed="true" stored="true" />

        <!--  Period linked data -->
        <field name="broadperiodEH" type="string" indexed="true" stored="true"/>
        <field name="broadperiodBM" type="string" indexed="true" stored="true"/>
        <field name="periodFromEH" type="string" indexed="true" stored="true"/>
        <field name="periodFromBM" type="string" indexed="true" stored="true"/>
        <field name="periodToEH" type="string" indexed="true" stored="true"/>
        <field name="periodToBM" type="string" indexed="true" stored="true"/>
        <!-- catchall field, containing all other searchable text fields (implemented
             via copyField further on in this schema  -->
        <field name="text" type="text" indexed="true" stored="false" multiValued="true"/>
        <field name="objectType" type="string" indexed="true" stored="false" multiValued="false"/>
        <!-- catchall text field that indexes tokens both normally and in reverse for efficient
             leading wildcard queries. -->
        <field name="text_rev" type="text_rev" indexed="true" stored="false" multiValued="true"/>


        <!-- Uncommenting the following will create a "timestamp" field using
             a default value of "NOW" to indicate when each document was indexed.
          -->

        <field name="timestamp" type="date" indexed="true" stored="true" default="NOW" multiValued="false"/>


        <!-- Dynamic field definitions.  If a field name is not found, dynamicFields
             will be used if the name matches any of the patterns.
             RESTRICTION: the glob-like pattern in the name attribute must have
             a "*" only at the start or the end.
             EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
             Longer patterns will be matched first.  if equal size patterns
             both match, the first appearing in the schema will be used.-->
        <dynamicField name="*_i" type="int" indexed="true" stored="true"/>
        <dynamicField name="*_s" type="string" indexed="true" stored="true"/>
        <dynamicField name="*_l" type="long" indexed="true" stored="true"/>
        <dynamicField name="*_t" type="text" indexed="true" stored="true"/>
        <dynamicField name="*_txt" type="text" indexed="true" stored="true" multiValued="true"/>
        <dynamicField name="*_b" type="boolean" indexed="true" stored="true"/>
        <dynamicField name="*_f" type="float" indexed="true" stored="true"/>
        <dynamicField name="*_d" type="double" indexed="true" stored="true"/>

        <!-- Type used to index the lat and lon components for the "location" FieldType-->
        <dynamicField name="*_coordinate" type="tdouble" indexed="true" stored="false"/>

        <dynamicField name="*_dt" type="date" indexed="true" stored="true"/>
        <dynamicField name="*_p" type="location" indexed="true" stored="true"/>

        <!-- some trie-coded dynamic fields for faster range queries-->
        <dynamicField name="*_ti" type="tint" indexed="true" stored="true"/>
        <dynamicField name="*_tl" type="tlong" indexed="true" stored="true"/>
        <dynamicField name="*_tf" type="tfloat" indexed="true" stored="true"/>
        <dynamicField name="*_td" type="tdouble" indexed="true" stored="true"/>
        <dynamicField name="*_tdt" type="tdate" indexed="true" stored="true"/>

        <dynamicField name="*_pi" type="pint" indexed="true" stored="true"/>

        <dynamicField name="ignored_*" type="ignored" multiValued="true"/>
        <dynamicField name="attr_*" type="textgen" indexed="true" stored="true" multiValued="true"/>

        <dynamicField name="random_*" type="random"/>

        <!-- uncomment the following to ignore any fields that don't already match an existing
             field name or dynamic field, rather than reporting them as an error.
             alternately, change the type="ignored" to some other type e.g. "text" if you want
             unknown fields indexed and/or stored by default -->
        <!--dynamicField name="*" type="ignored" multiValued="true" /-->

    </fields>

    <!-- Field to use to determine and enforce document uniqueness.
         Unless this field is marked with required="false", it will be a required field
      -->
    <uniqueKey>findIdentifier</uniqueKey>

    <!-- field for the QueryParser to use when an explicit fieldname is absent -->
    <defaultSearchField>text</defaultSearchField>

    <!-- SolrQueryParser configuration: defaultOperator="AND|OR" -->
    <solrQueryParser defaultOperator="AND"/>

    <!-- copyField commands copy one field to another at the time a document
          is added to the index.  It's used either to index the same field differently,
          or to add multiple fields to the same field for easier/faster searching.  -->

    <!-- Object meta data -->

    <copyField source="old_findID" dest="text"/>
    <copyField source="hoardID" dest="text"/>
    <copyField source="notes" dest="text"/>
    <copyField source="description" dest="text"/>
    <copyField source="broadperiod" dest="text"/>
    <copyField source="inscription" dest="text"/>
    <copyField source="classification" dest="text"/>
    <copyField source="subClassification" dest="text"/>
    <copyField source="cultureName" dest="text"/>
    <copyField source="materialTerm" dest="text"/>
    <copyField source="currentLocation" dest="text"/>
    <copyField source="subsequentActionTerm" dest="text"/>
    <copyField source="musaccno" dest="text"/>
    <copyField source="otherRef" dest="text"/>

    <!-- Numismatic data -->
    <copyField source="obverseDescription" dest="text"/>
    <copyField source="reverseDescription" dest="text"/>
    <copyField source="obverseLegend" dest="text"/>
    <copyField source="reverseLegend" dest="text"/>
    <copyField source="denominationName" dest="text"/>
    <copyField source="mintName" dest="text"/>
    <copyField source="tribeName" dest="text"/>
    <copyField source="rulerName" dest="text"/>
    <copyField source="secondaryRulerName" dest="text"/>
    <copyField source="mintmark" dest="text"/>
    <copyField source="categoryTerm" dest="text"/>
    <copyField source="typeTerm" dest="text"/>
    <copyField source="categoryTerm" dest="text" />
    <copyField source="moneyerName" dest="text"/>
    <copyField source="reverseType" dest="text"/>
    <copyField source="cciNumber" dest="text"/>
    <copyField source="allenType" dest="text"/>
    <copyField source="mackType" dest="text"/>
    <copyField source="abcType" dest="text"/>
    <copyField source="vaType" dest="text"/>
    <copyField source="moneyerName" dest="text"/>
    <copyField source="rrcID" dest="text" />
    <copyField source="ricID" dest="text" />

    <!-- Reference numbers -->
    <copyField source="county" dest="text"/>
    <copyField source="objecttype" dest="text"/>
    <copyField source="smrRef" dest="text"/>
    <copyField source="TID" dest="text"/>

    <!-- Spatial data -->
    <copyField source="knownas" dest="text"/>
    <copyField source="county" dest="text"/>
    <copyField source="rallyName" dest="text"/>
    <copyField source="district" dest="text"/>
    <copyField source="regionName" dest="text"/>
    <copyField source="discoveryMethod" dest="text"/>

    <!-- Hoard data -->


    <!-- Case insensitivity -->
    <copyField source="objecttype" dest="objectType"/>

    <!-- Above, multiple source fields are copied to the [text] field.
       Another way to map multiple source fields to the same
       destination field is to use the dynamic field syntax.
       copyField also supports a maxChars to copy setting.  -->

    <!-- <copyField source="*_t" dest="text" maxChars="3000"/> -->

    <!-- copy name to alphaNameSort, a field designed for sorting by name -->
    <!-- <copyField source="name" dest="alphaNameSort"/> -->


    <!-- Similarity is the scoring routine for each document vs. a query.
         A custom similarity may be specified here, but the default is fine
         for most applications.  -->
    <!-- <similarity class="org.apache.lucene.search.similarities.DefaultSimilarity"/> -->
    <!-- ... OR ...
         Specify a SimilarityFactory class name implementation
         allowing parameters to be used.
    -->
    <!--
    <similarity class="com.example.solr.CustomSimilarityFactory">
      <str name="paramkey">param value</str>
    </similarity>
    -->


</schema>
